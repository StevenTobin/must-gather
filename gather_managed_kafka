#!/bin/bash

BASE_COLLECTION_PATH="/must-gather"

# Auxiliary function that adds a k8s prefix to a resource
# $1: The prefix - e.g. "ns" or "pod"
# $2...$N: Resources
# Returns: The list of resources with the prefix prepended on them
#
# Example: addResourcePrefix pod a b c  => Returns: pod/a pod/b pod/c
function addResourcePrefix() {
  local result=""
  local prefix="${1}"
  shift

  for ns in $*; do
    result+="${prefix}/${ns} "
  done

  echo "${result}"
}

# Function that sorts and reduces a list to unique values
function unique() {
  local list="${1}"
  echo "${list[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '
}

# Get the namespaces of all Managed Kafka resources in the cluster
function getManagedKafkaNamespaces() {
  local result=()

  local namespaces=$(oc get ManagedKafka --all-namespaces -o jsonpath='{.items[*].metadata.namespace}')
  for namespace in ${namespaces}; do
    result+=" ${namespace} "
  done

  echo "$(unique ${result})"
}

# Get the namespaces of all kafka resources in the cluster
function getKafkaNamespaces() {
  local result=()

  local namespaces=$(oc get Kafka --all-namespaces -o jsonpath='{.items[*].metadata.namespace}')
  for namespace in ${namespaces}; do
    result+=" ${namespace} "
  done

  echo "$(unique ${result})"
}

function getManagedKafkas() {
  local result=()

  local mk=$(oc get managedkafka --all-namespaces -o jsonpath='{.items[*].metadata.name}')
  for name in ${mk}; do
    result+="name"
  done
}

function main() {
  echo
  echo "Executing Managed Kafka gather script"
  echo

  local managedKafkaNamespaces=$(getManagedKafkaNamespaces)
  local kafkaNamespaces=$(getKafkaNamespaces)

  # Namespaces
  resources=$(addResourcePrefix ns "${managedKafkaNamespaces}")
  resources+=$(addResourcePrefix ns "${kafkaNamespaces}")
  resources+=$(addResourcePrefix ns "redhat-kas-fleetshard-operator")
  resources+=$(addResourcePrefix ns "redhat-managed-kafka-operator")
  resources+=$(addResourcePrefix ns "managed-application-services-observability")
  resources+=$(addResourcePrefix ns "openshift-ingress")

  # CRs
  crs="managedkafka kafka ingresscontrollers"
  observability_crs="grafana grafanadashboard observability prometheus podmonitor prometheusrules"

  for resource in ${resources}; do
    echo
    echo "Dumping resource ${resource}..."
    oc adm inspect --all-namespaces "--dest-dir=${BASE_COLLECTION_PATH}" ${resource}
  done

  for cr in ${crs}; do
    echo
    echo "Dumping cr ${cr}..."
    oc adm inspect --all-namespaces "--dest-dir=${BASE_COLLECTION_PATH}" ${cr}
  done

  for ocr in ${observability_crs}; do
    echo
    echo "Dumping observability cr ${ocr}..."
    oc adm inspect -n managed-application-services-observability  "--dest-dir=${BASE_COLLECTION_PATH}" ${ocr}
  done
  
  echo
  echo "Dumping additional scrape config..."
  oc get secret additional-scrape-configs -n managed-application-services-observability -o yaml > ${BASE_COLLECTION_PATH}/namespaces/managed-application-services-observability/additional-scrape-configs.yml
}

main
